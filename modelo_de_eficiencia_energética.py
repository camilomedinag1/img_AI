# -*- coding: utf-8 -*-
"""Modelo de eficiencia energética.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TfVf64cC17axYgB46KrX0PDzY5tCUtdM
"""

#importar librerias
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import seaborn as sns

"""Preparación de los Datos en Python"""

# Cargar los datos desde un archivo de Excel
df = pd.read_excel("/content/Datos_consumo_de_energia_antioquia.xlsx")

# Ver las primeras filas del DataFrame
print(df.head())

"""Análisis Descriptivo:

Resumir los datos para obtener información como la media, mediana, y desviación estándar.
Comparar la relación entre el PIB per cápita y el consumo energético per cápita.
"""

print(df.describe())

"""Modelado de Dependencia Energética:
 Utilizar técnicas de regresión para modelar la relación entre el consumo energético y el PIB bruto. Esto podría ayudarte a entender qué tan dependiente es la economía de una región de su consumo energético.
"""

# Variables independientes y dependientes
X = df[['KW per capita', 'Consumo promedio mensual de energía (kWh)']]
y = df['PIB Bruto-millonesCOP']

# Modelo de regresión lineal
model = LinearRegression()
model.fit(X, y)

# Coeficientes de regresión
print("Intercepto:", model.intercept_)
print("Coeficientes:", model.coef_)

"""Visualización de Datos: Puedes crear gráficos para visualizar las relaciones entre las variables."""

# Scatter plot de PIB per cápita vs Consumo de energía per cápita
plt.scatter(df['KW per capita'], df['PIB per capita'])
plt.xlabel("KW per capita")
plt.ylabel("PIB per capita")
plt.title("Relación entre Consumo de Energía y PIB per Cápita")
plt.show()

"""En la grafica anterior se muestra que no existe nunguna dependencia del PIB per capita con el consumo de energia per capita, depende mas de los modelos economicos y tipos de industrias.

Análisis de Eficiencia Energética:

Puedes calcular índices de eficiencia energética y explorar su impacto en el PIB.
Realizar comparaciones entre diferentes municipios para ver cuáles son más eficientes.

Modelos de Aprendizaje Automático: Regresión múltiple: Para predecir el PIB bruto en función de múltiples variables como el consumo energético, la distancia a la central eléctrica, y el tipo de energía.
Clustering: Para agrupar municipios similares en términos de su dependencia energética y estructura económica.
Análisis de Componentes Principales (PCA): Para reducir la dimensionalidad de los datos y comprender mejor las principales fuentes de variación.

Ejemplo de Análisis Predictivo
"""

# Dividir los datos en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Ajustar el modelo
model.fit(X_train, y_train)

# Hacer predicciones
predictions = model.predict(X_test)

# Evaluar el modelo
mse = mean_squared_error(y_test, predictions)
print("Error Cuadrático Medio:", mse)

"""Cálculo de la Eficiencia Energética:
La eficiencia energética se puede calcular como la relación entre el PIB bruto y el consumo de energía total.
"""

# Calcular eficiencia energética
df['Eficiencia Energetica'] = df['PIB Bruto-millonesCOP'] / (df['Consumo promedio mensual de energía (kWh)'] * 12)

# Ordenar por eficiencia energética de menor a mayor
df_ordenado = df.sort_values(by='Eficiencia Energetica', ascending=True)

# Mostrar las primeras filas con el cálculo ordenado
print(df_ordenado[['Municipio', 'Eficiencia Energetica']])

"""Normalización del Coeficiente de Eficiencia Energética
Para comparar municipios en una escala de 0 a 100, debes normalizar los valores.
"""

# Normalizar la eficiencia energética en una escala de 0 a 100
min_eff = df['Eficiencia Energetica'].min()
max_eff = df['Eficiencia Energetica'].max()

df['Coeficiente Yane'] = 100 * (df['Eficiencia Energetica'] - min_eff) / (max_eff - min_eff)

# Mostrar las primeras filas con el coeficiente normalizado
print(df[['Municipio', 'Coeficiente Yane']])

"""El anterior proceso identifica coheficiente yane el cual mas cerca de 100 usa mas energia para producir energia y mas cerca de cero menos dependiente de la energia es.

Análisis y Visualización
Puedes analizar y visualizar los datos para obtener más información sobre las diferencias en eficiencia energética entre los municipios.
"""

import matplotlib.pyplot as plt

# Histograma de eficiencia energética
plt.hist(df['Coeficiente Yane'], bins=10, color='skyblue', edgecolor='black')
plt.xlabel("Coeficiente Yane (Eficiencia Energética)")
plt.ylabel("Frecuencia")
plt.title("Distribución del Coeficiente de Eficiencia Energética")
plt.show()

# Gráfico de barras para comparar municipios
df_sorted = df.sort_values(by='Coeficiente Yane', ascending=False)
plt.bar(df_sorted['Municipio'], df_sorted['Coeficiente Yane'], color='lightgreen')
plt.xlabel("Municipio")
plt.ylabel("Coeficiente Yane")
plt.title("Coeficiente de Eficiencia Energética por Municipio")
plt.xticks(rotation=90)
plt.show()

"""predecir la eficiencia energética o analizar otros factores influyentes, podrías usar modelos de regresión:"""

# Variables independientes y dependientes
X = df[['KW per capita', 'Consumo promedio mensual de energía (kWh)', 'Población']]
y = df['PIB Bruto-millonesCOP']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Crear y ajustar el modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Hacer predicciones
y_pred = model.predict(X_test)

# Calcular el error cuadrático medio
mse = mean_squared_error(y_test, y_pred)
print("Error Cuadrático Medio:", mse)

"""Regresión Múltiple
Utilizaremos la regresión múltiple para predecir el PIB bruto en función de varias características como el consumo energético y la población.
"""

# Selección de características y variable objetivo
X = df[['KW per capita', 'Consumo promedio mensual de energía (kWh)', 'Población']]
y = df['PIB Bruto-millonesCOP']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Crear y ajustar el modelo de regresión lineal
model = LinearRegression()
model.fit(X_train, y_train)

# Coeficientes del modelo
print("Intercepto:", model.intercept_)
print("Coeficientes:", model.coef_)

# Predicción y evaluación
y_pred = model.predict(X_test)
from sklearn.metrics import mean_squared_error, r2_score
print("Error Cuadrático Medio:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))

"""Interpretar los Resultados
Regresión Múltiple: El R² y el error cuadrático medio ayudarán a evaluar la precisión del modelo. Un valor de R² cercano a 1 indica un buen ajuste del modelo.
Clustering: Puedes observar cómo se agrupan los municipios y utilizar esta información para identificar patrones, como qué municipios tienen un uso eficiente de la energía.
PCA: Este análisis te muestra cuáles son las principales características que contribuyen a la variación en el conjunto de datos.

Clustering con K-Means
El clustering nos ayudará a identificar grupos de municipios con características similares.
"""

# Usar K-Means para agrupar municipios
X_clustering = df[['KW per capita', 'Población', 'Eficiencia Energetica']]
kmeans = KMeans(n_clusters=3, random_state=45)  # Puedes ajustar el número de clusters
df['Cluster'] = kmeans.fit_predict(X_clustering)

# Visualizar los clusters
sns.scatterplot(x='KW per capita', y='Población', hue='Cluster', data=df, palette='viridis')
plt.title("Clusters de Municipios por Consumo Energético y Población")
plt.show()

"""Para analizar la relación entre la distancia a la central eléctrica, el Coeficiente Yane y la eficiencia energética, se puede seguir un enfoque de análisis estadístico y visualización de datos.


"""

correlacion_distancia_yane = df['Distancia a la central eléctrica más cercana (km)'].corr(df['Coeficiente Yane'])
correlacion_distancia_eficiencia = df['Distancia a la central eléctrica más cercana (km)'].corr(df['Eficiencia Energetica'])

print("Correlación entre distancia y Coeficiente Yane:", correlacion_distancia_yane)
print("Correlación entre distancia y eficiencia energética:", correlacion_distancia_eficiencia)

"""Visualizar la Relación con Diagramas de Dispersión
Usar gráficos de dispersión ayudará a entender visualmente la relación.
"""

# Diagrama de dispersión para distancia vs. Coeficiente Yane
plt.figure(figsize=(10, 5))
sns.scatterplot(x='Distancia a la central eléctrica más cercana (km)', y='Coeficiente Yane', data=df)
plt.title("Relación entre Distancia a la Central Eléctrica y Coeficiente Yane")
plt.xlabel("Distancia a la Central Eléctrica (km)")
plt.ylabel("Coeficiente Yane")
plt.show()

# Diagrama de dispersión para distancia vs. Eficiencia Energética
plt.figure(figsize=(10, 5))
sns.scatterplot(x='Distancia a la central eléctrica más cercana (km)', y='Eficiencia Energetica', data=df)
plt.title("Relación entre Distancia a la Central Eléctrica y Eficiencia Energética")
plt.xlabel("Distancia a la Central Eléctrica (km)")
plt.ylabel("Eficiencia Energética")
plt.show()

"""En el modelo anterior se evidencia la falta de relación entre la distancia de la central y la necesidad de energía. En una sociedad más eficiente, los datos se relacionarían de manera secuencial."""